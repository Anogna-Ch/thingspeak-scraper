{"url": "https://community.thingspeak.com/forum/arduino/page-11/", "threads": [{"url": "https://community.thingspeak.com/forum/arduino/no-socket-available/", "posts": [{"date": "July 24, 2014 - 7:40 am", "content": "Hi, I am sending data to ThingsSpeak using an Arduino and the Wifi Shield.After sendig some data I can't connect any more and an error appear. Any suggestion?Connecting to ThingSpeak...-27315\u00baCH...disconnectedConnecting to ThingSpeak...HTTP/1.1 200 OKServer: nginx/1.5.7Date: Thu, 24 Jul 2014 09:47:28 GMTContent-Type: text/html; charset=utf-8Transfer-Encoding: chunkedConnection: closeVary: Accept-EncodingStatus: 200 OKX-Frame-Options: ALLOWALLAccess-Control-Allow-Origin: *Access-Control-Allow-Methods: GET, POST, PUT, OPTIONS, DELETE, PATCHAccess-Control-Allow-Headers: origin, content-type, X-Requested-WithAccess-Control-Max-Age: 1800ETag: 'fd4c2dc64ccb8496e6f1f94c85f30d06'Cache-Control: max-age=0, private, must-revalidateSet-Cookie: request_method=POST; path=/X-Request-Id: e9e17acd-03bc-4b15-bc51-a7b6fe4b921a436310No Socket availableConnection to ThingSpeak Failed (1)", "num_user_post": " 19", "author": "rodri"}, {"date": "July 24, 2014 - 12:31 pm", "content": "Hi,I think the error is appearing on your Arduino because all of its sockets are being used up.  You may be able to fix the problem by adding flush() and stop() commands to your code, as detailed here: http://forum.arduino.cc/index.php/topic,170460.0.htmlHope this helps!lee", "num_user_post": " 457", "author": "lee"}]}, {"url": "https://community.thingspeak.com/forum/arduino/fluid-wireless-gateway/", "posts": [{"date": "May 23, 2014 - 1:29 am", "content": "The Fluid system is a low cost gateway that connects wireless sensors, and local I/O, to the Internet. It uses an Atmel 8-bit microcontroller as the main processor, and is compatible with the Arduino software development environment. This example does three things; sends an analog value to the cloud, reads a control flag 'onoff' to set a digital output, and sends the temperature sensor data to the cloud Fluid is an Arduino-inspired development kit and reference design that combines an Arduino Uno, Ethernet Shield and low-cost wireless sensor interfaces into a single PCB. For complete documentation and source code visit bit.ly/1t0U4lY", "num_user_post": " 5", "author": "joshuasimi"}]}, {"url": "https://community.thingspeak.com/forum/arduino/anemometer-to-thingspeak/", "posts": [{"date": "March 30, 2014 - 2:00 pm", "content": "I'm trying to get my wind speed information to post to thingspeak.  Im successful at capturing it in the Serial.  (And I've been successful in capturing other data and posting to thingspeak).My problem is that in the sketch there is a portion that captures, calculates and reports to serial in a certain way.  I'm new at coding (obviously), so this is a problem for me - I want the data to get to thingspeak in the form of i.e.: 9.2 (mph).the codes that calculates and prints to serial is:void calcWindSpeed() {   int x, iSpeed;   // This will produce mph * 10   // (didn't calc right when done as one statement)   long speed = 1492;  //2.4mph   speed *= numRevsAnemometer;   speed /= MSECS_CALC_WIND_SPEED;   iSpeed = speed;         // Need this for formatting below   Serial.print('Wind speed: ');   x = iSpeed / 10;   Serial.print(x);   Serial.print('.');   x = iSpeed % 10;   Serial.print(x);   numRevsAnemometer = 0;        // Reset counter}The rest is:  'Wind Speed:  9.2 ' 'Wind Speed: 9.8' , etc etcWhat do i do to get that '9.2' into the call to thingspeak?  Im confused because the above uses 'x' twice and then i get lost.Any help is appreciated.(my example that works to post DHT11 sensor temp looks like this:    updateThingSpeak('baseTemp='+(DHT11.fahrenheit(), DEC));)Thanks!", "num_user_post": " 8", "author": "notforyou23"}, {"date": "April 30, 2014 - 2:47 am", "content": "The code above is needed because arduino output routines dont handle floating point numbers.   I suggest the followingx=iSpeed/10  // get the whole numbery=iSpeed%10 // get the decimalupdateThingSpeak('field1='+String(x, DEC)+'.'+String(y,DEC)); // make it all into a string to send to ThingSpeak(of course you need to include the library for the updateThingSpeak() function )See also this threadhttp://community.thingspeak.com/tutorials/arduino/using-an-arduino-ethernet-shield-to-update-a-thingspeak-channel/", "num_user_post": " 271", "author": "rw950431"}, {"date": "May 2, 2014 - 11:28 am", "content": "Actually, Arduino does do floats:float slabGPM = 0;//generate Custom Flow Channel StringslabGPM = hydronicWaterFlow.readGPM();Serial.print(F('Slab GPM: '));Serial.println(slabGPM);String channelFlowStr = String('field1=') + String(slabGPM, DEC);", "num_user_post": " 70", "author": "turgo"}, {"date": "May 22, 2014 - 11:04 pm", "content": "Well, thanks.  I did end up changing my code a bit (grab a little from here, and a little from there...), with the aim simplifying the wind speed calculation.  I am now successfully posting lots of data.  It's going great.  I'm loving Thingspeak for sure...I'm open to any suggestions in tweaking for efficiency.Otherwise, I'm posting this out there for whoever wants it.  This works well on my Yun.#include 'Bridge.h'#include 'HttpClient.h'#include #define anemometer  2                // D2 Wind speed#define DHTPIN_1   A0#define DHTPIN_2   A1#define DHTTYPE DHT11const float pi = 3.14159265; // piconst int radio = 60;  // Radius from vertical anemometer axis to a cup center (mm)const unsigned long Wait = 1250;  // Amount of Time to wait till Re-connecting, Changing this alsoconst unsigned long period = Wait * 2; // Measurement period (miliseconds)const unsigned long IDLE_TIMEOUT_MS = 1000;unsigned int counter = 0;         // pulse count for wind sensorunsigned int RPM = 0;             // Revolutions per minuteunsigned int Sample = 0;          // Sample numberfloat windspeedmph = 0/ 0.445;    // Wind speed (m/s)float windgustmph = 0;            // Max wind speed//Thingspeak parametersString thingspeak_update_API    = 'http://api.thingspeak.com/update?';String thingspeak_write_API_key = 'key=XXXXXXXXXXX';//Insert Your Write API key hereString thingspeakfieldname      = '&field1=';String thingspeakfieldname2      = '&field2=';String thingspeakfieldname3      = '&field3=';String thingspeakfieldname4      = '&field4=';String thingspeakfieldname5      = '&field5=';String thingspeakfieldname6      = '&field6=';String thingspeakfieldname7      = '&field7=';const byte ANEMOM = 2;float elapsed, diff, start;float  data, tempfb, tempfo, tempfb1, humid, dewP, humidO, dewPO;dht11 DHT11_1(A0);dht11 DHT11_2(A1);//int tempf =0;void setup() {  Bridge.begin();  Console.begin();  while (!Console);  DHT11_1.attach(A0);  delay(5);  DHT11_2.attach(A1);  pinMode(ANEMOM,INPUT);  Console.flush();}void loop() {  // sketch name Console.println(); Console.println('Sketch Running: Wind_Weather_Doubletemp'); Console.println();  //     HttpClient client;     tempfb1 = DHT11_1.fahrenheit();     tempfb = tempfb1 - 2;     tempfo = DHT11_2.fahrenheit();  String t = String(tempfb);  String t2 = String(tempfo);    humid = DHT11_1.humidity;    dewP = Fahrenheit(dewPointFast(DHT11_1.temperature, DHT11_1.humidity));    humidO = DHT11_2.humidity;    dewPO = Fahrenheit(dewPointFast(DHT11_2.temperature, DHT11_2.humidity));   digitalWrite (ANEMOM, HIGH);                   // internal pull-up resistor  windvelocity();  dhtTempOut();  RPMcalc();  WindSpeed();  //dhtTempIn();    String request_string =  thingspeak_update_API + thingspeak_write_API_key + thingspeakfieldname + windspeedmph+ thingspeakfieldname2 +tempfb + thingspeakfieldname3 +humid + thingspeakfieldname4 +dewP+ thingspeakfieldname5 +tempfo+ thingspeakfieldname6 +humidO+ thingspeakfieldname7 +dewPO;    // Make a HTTP request:    client.get(request_string);    Console.println(request_string);    Console.flush();    delay(150000);   // 150000 = ~2.5 minutes}void dhtTempOut (){ //Serial.println('');  int chk1 = DHT11_2.read(A1); // float DPF = dewPointFast( (TF-32.0)*5/9, humidity) * 9.0/5.0 +32.0;  Console.println();  Console.print('Read Outside Sensor: ');  switch (chk1)  {    case 0: Console.println('OK'); break;    case -1: Console.println('Checksum error'); break;    case -2: Console.println('Time out error'); break;    default: Console.println('Unknown error'); break;  }  Console.println();  Console.print('Outside Humidity (%): ');  Console.println((float)DHT11_2.humidity);  Console.print('Outside Temperature (\u00b0C): ');  Console.println((float)DHT11_2.temperature);  Console.print('Outside Temperature (\u00b0F): ');  Console.println(Fahrenheit(DHT11_2.temperature));   Console.print('Outside Temperature (\u00b0K): ');  Console.println(DHT11_2.kelvin());  Console.print('Outside Dew Point (\u00b0C): ');  Console.println(DHT11_2.dewPoint());  Console.print('Outside Dew PointFast (\u00b0C): ');  Console.println(DHT11_2.dewPointFast());  Console.print('Outside Dew PointFast (\u00b0F): ');  Console.println(Fahrenheit(dewPointFast(DHT11_2.temperature, DHT11_2.humidity)));Console.println();  delay(250);    int chk0 = DHT11_1.read(A0);Console.println();  Console.print('Read Inside Sensor: ');  switch (chk0)  {    case 0: Console.println('OK'); break;    case -1: Console.println('Checksum error'); break;    case -2: Console.println('Time out error'); break;    default: Console.println('Unknown error'); break;  }     Console.print('Basement Humidity (%): ');  Console.println((float)DHT11_1.humidity);  Console.print('Basement Temperature (\u00b0C): ');  Console.println((float)DHT11_1.temperature);  Console.print('Basement Temperature (\u00b0F): ');  Console.println(Fahrenheit(DHT11_1.temperature));   Console.print('Basement Temperature (\u00b0K): ');  Console.println(DHT11_1.kelvin());  Console.print('Basement Dew Point (\u00b0C): ');  Console.println(DHT11_1.dewPoint());  Console.print('Basement Dew PointFast (\u00b0C): ');  Console.println(DHT11_1.dewPointFast());    Console.print('Basement Dew PointFast (\u00b0F): ');  Console.println(Fahrenheit(dewPointFast(DHT11_1.temperature, DHT11_1.humidity)));  delay(250);}void windvelocity(){  windspeedmph = 0;  counter = 0;  digitalWrite (2, HIGH);  attachInterrupt(1, addcount, FALLING);//anemometer  unsigned long millis();  long startTime = millis();  while(millis() < startTime + period) {  }  detachInterrupt(1);}void RPMcalc(){  RPM=((counter*4)*60)/(period/1000);  // Calculate revolutions per minute (RPM)}void WindSpeed(){  windspeedmph = ((2 * pi * radio * RPM)/60) / 1000;  Console.println();  Console.println(windspeedmph);  delay(15);}void addcount(){  counter++;}// dewPoint function NOAA// reference: http://wahiduddin.net/calc/density_algorithms.htmdouble dewPoint(double celsius, double humidity){        double A0= 373.15/(273.15 + celsius);        double SUM = -7.90298 * (A0-1);        SUM += 5.02808 * log10(A0);        SUM += -1.3816e-7 * (pow(10, (11.344*(1-1/A0)))-1) ;        SUM += 8.1328e-3 * (pow(10,(-3.49149*(A0-1)))-1) ;        SUM += log10(1013.246);        double VP = pow(10, SUM-3) * humidity;        double T = log(VP/0.61078);   // temp var        return (241.88 * T) / (17.558-T);}// delta max = 0.6544 wrt dewPoint()// 5x faster than dewPoint()// reference: http://en.wikipedia.org/wiki/Dew_pointdouble dewPointFast(double celsius, double humidity){        double a = 17.271;        double b = 237.7;        double temp = (a * celsius) / (b + celsius) + log(humidity/100);        double Td = (b * temp) / (a - temp);        return Td;}//Celsius to Fahrenheit conversiondouble Fahrenheit(double celsius){        return 1.8 * celsius + 32;}", "num_user_post": " 8", "author": "notforyou23"}]}, {"url": "https://community.thingspeak.com/forum/arduino/static-ip-instead-of-dhcp/", "posts": [{"date": "November 6, 2013 - 11:28 am", "content": "Hi all, I am new at Adruino, but have been plowing through successfully this far. I was able to get data sent to my channel no problem using Dhcp, but if I try to set an ip instead, i can connect. I've used my hardware before with a fixed ip as a webserver and with souliss. I am sure there is something I am missing. The following is the example code which works, except when I added the mod for fixed IP. Any pointers would be appreciated! Thanks!/* Arduino --> ThingSpeak Channel via Ethernet The ThingSpeak Client sketch is designed for the Arduino and Ethernet. This sketch updates a channel feed with an analog input reading via the ThingSpeak API (http://community.thingspeak.com/documentation/) using HTTP POST. The Arduino uses DHCP and DNS for a simpler network setup. The sketch also includes a Watchdog / Reset function to make sure the Arduino stays connected and/or regains connectivity after a network outage. Use the Serial Monitor on the Arduino IDE to see verbose network feedback and ThingSpeak connectivity status. Getting Started with ThingSpeak:   * Sign Up for New User Account - https://www.thingspeak.com/users/new   * Register your Arduino by selecting Devices, Add New Device   * Once the Arduino is registered, click Generate Unique MAC Address   * Enter the new MAC Address in this sketch under 'Local Network Settings'   * Create a new Channel by selecting Channels and then Create New Channel   * Enter the Write API Key in this sketch under 'ThingSpeak Settings' Arduino Requirements:   * Arduino with Ethernet Shield or Arduino Ethernet   * Arduino 1.0 IDE  Network Requirements:   * Ethernet port on Router   * DHCP enabled on Router   * Unique MAC Address for Arduino Created: October 17, 2011 by Hans Scharler (http://www.iamshadowlord.com) Additional Credits: Example sketches from Arduino team, Ethernet by Adrian McEwen*/#include#include // Local Network Settingsbyte mac[] = { 0xD4, 0x28, 0xB2, 0xFF, 0xCA, 0x20 }; // Must be unique on local networkIPAddress ip(132 ,206 ,95 ,251);  //added for fixed ipIPAddress gateway(132, 206, 95, 253);  //added for fixed ip// ThingSpeak Settingschar thingSpeakAddress[] = 'api.thingspeak.com';String writeAPIKey = 'PORS7F4051RNGM3J';const int updateThingSpeakInterval = 16 * 1000;      // Time interval in milliseconds to update ThingSpeak (number of seconds * 1000 = interval)// Variable Setuplong lastConnectionTime = 0;boolean lastConnected = false;int failedCounter = 0;// Initialize Arduino Ethernet ClientEthernetClient client;void setup(){  // Start Serial for debugging on the Serial Monitor  Serial.begin(9600);  // Start Ethernet on Arduino  startEthernet();  //Ethernet.begin(mac);  Ethernet.begin(mac, ip, gateway); // //added for fixed ip  delay(1000);}void loop(){  // read the input on analog pin 0:  int sensorValue = analogRead(A0);  // Convert the analog reading (which goes from 0 - 1023) to a voltage (0 - 5V):int temp = sensorValue * (4.19 / 1023.0)*100; // balance for 4.19 max voltage  // print out the value you read: String analogPin0 = String(temp, DEC);  // Print Update Response to Serial Monitor  if (client.available())  {   char c = client.read();    Serial.print(c);  }  // Disconnect from ThingSpeak  if (!client.connected() && lastConnected)  {    Serial.println('...disconnected');    Serial.println();    client.stop();  }  // Update ThingSpeak  if(!client.connected() && (millis() - lastConnectionTime > updateThingSpeakInterval))  {    updateThingSpeak('field1='+analogPin0);  }  // Check if Arduino Ethernet needs to be restarted  if (failedCounter > 3 ) {startEthernet();}  lastConnected = client.connected();}void updateThingSpeak(String tsData){  if (client.connect(thingSpeakAddress, 80))  {    client.print('POST /update HTTP/1.1n');    client.print('Host: api.thingspeak.comn');    client.print('Connection: closen');    client.print('X-THINGSPEAKAPIKEY: '+writeAPIKey+'n');    client.print('Content-Type: application/x-www-form-urlencodedn');    client.print('Content-Length: ');    client.print(tsData.length());    client.print('nn');    client.print(tsData);    lastConnectionTime = millis();    if (client.connected())    {      Serial.println('Connecting to ThingSpeak...');      Serial.println();      failedCounter = 0;    }    else    {      failedCounter++;      Serial.println('Connection to ThingSpeak failed ('+String(failedCounter, DEC)+')');      Serial.println();    }  }  else  {    failedCounter++;    Serial.println('Connection to ThingSpeak Failed ('+String(failedCounter, DEC)+')');    Serial.println();    lastConnectionTime = millis();  }}void startEthernet(){  client.stop();  Serial.println('Connecting Arduino to network...');  Serial.println();    delay(1000);  // Connect to network amd obtain an IP address using DHCP  if (Ethernet.begin(mac) == 0)  {    Serial.println('DHCP Failed, reset Arduino to try again');    Serial.println();  }  else  {    Serial.println('Arduino connected to network using DHCP');    Serial.println();  }  delay(1000);}", "num_user_post": " 20", "author": "gerald"}, {"date": "November 6, 2013 - 11:44 am", "content": "BTW I can ping my board with the fixed IP.", "num_user_post": " 20", "author": "gerald"}, {"date": "May 21, 2014 - 11:18 am", "content": "Hi,I have to make it work with fixed IP?How did you fixed it ?Please help. Thanks a lot!", "num_user_post": " 1", "author": "mehmetemin"}]}, {"url": "https://community.thingspeak.com/forum/arduino/weather-radio-data/", "posts": [{"date": "March 17, 2014 - 12:27 pm", "content": "HiI currently have my arduino UNO, with Ethernet shield, linked to my si4707 module (https://www.sparkfun.com/products/11129). Using the code downloaded from this page (http://www.raydees.com/Weather_Radio.html), I am able to successfully receive alerts for tornados that are approaching my area via the serial monitor.I'd love to be able to isolate these alerts, ie only parse the tornado alerts, and share via a web page using Thingspeak.The alerts are contained within the analogue radio signal processed by the si4707 chip. This chip decodes the 3 letters, TOR in the case of the tornado.I was advised to add a line to the sample code to parse for this alert as follows:' Try the Si4707 zipped library and example sketch located here: http://www.raydees.com/Weather_Radio.html It parses the message out for you on the screen so you should be able to modify the sketch within the function that prints out the parsed message to the screen:if (sameEventName[0] == \u2019T\u2019 && sameEventName[1] == \u2018O\u2019 && sameEventName[2] == \u2018R\u2019) { //do this function that performs something for so long/so many times/unmute/turn on a light/etc\u2026\u2026 } 'I have tried to insert this code inside line 118 of the arduino sketch Si4707.ino, but it doesnt work.Please can someone point me in the right direction for how to parse for this TOR code, and then send to Thingspeak?Thanks", "num_user_post": " 3", "author": "ozymandiz"}, {"date": "March 17, 2014 - 2:33 pm", "content": "Ok I have got the code working so that the arduino reacts to a specific warning, ie tornados:'...if (sameEventName[0] == 'R' && sameEventName[1] == 'W' && sameEventName[2] == 'T')                digitalWrite(led, HIGH);...'Instead of turning on the LED, can anyone please suggest how to communicate this event to Thingspeak ? I realize that there is a delay in sending info to Thingspeak, which is ok as I am only interested in logging the events over time on a website.Thanks in advance.", "num_user_post": " 3", "author": "ozymandiz"}, {"date": "March 18, 2014 - 10:35 pm", "content": "Basically your code has to do a HTTP POST to the thingspeak API.  Suggest you look at the arduino tutorial as a starting pointhttp://community.thingspeak.com/tutorials/arduino/using-an-arduino-ethernet-shield-to-update-a-thingspeak-channel/", "num_user_post": " 271", "author": "rw950431"}, {"date": "March 21, 2014 - 11:51 am", "content": "Thanks!", "num_user_post": " 3", "author": "ozymandiz"}]}, {"url": "https://community.thingspeak.com/forum/arduino/sending-multiple-data-streams/", "posts": [{"date": "March 6, 2014 - 7:56 am", "content": "Hello,I am new to the entire Internet of Things concept and need a little help figuring out something.I am using this shield built by the folks at Cooking Hacks, to measure multiple bio-metric readings of the user (mainly body temperature and pulse rate/minute)[didn't know which link for the pic might work]http://i57.tinypic.com/jhzrb6.jpgI want to know how I can upload the specific readings to their respective feeds i.e the pulse rate to the feed graphing the pulse rate/minute and the temperature. All the examples I have seen online, seem to use the 'n'  new-line to check for the next reading appearing on the serial port. But I use the new-line to separate the data and make the serial output 'cleaner' to readAny kind of help and advice would be deeply appreciated,Thanks.", "num_user_post": " 1", "author": "lucky_picasso"}, {"date": "March 18, 2014 - 11:06 pm", "content": "It may help if you can give an example of the output from the shield or even a link to the details of the shield.", "num_user_post": " 271", "author": "rw950431"}]}, {"url": "https://community.thingspeak.com/forum/arduino/schetch-arduino-ethernet-dht11-dht22-help/", "posts": [{"date": "January 24, 2014 - 3:19 pm", "content": "Hi, I would like to install the sketch ThingSpeak for Arduino Ethernet + two sensors for temperature stability and humidity (DHT11 and DHT22). I can not make it all on my ThingSpeak. The purpose is to monitor the temperature and humidity inside and outside. The problem is that no data is uploaded to the channel. I kindly ask for help. Thank you very much. The sketch that I used is this:https://www.dropbox.com/sh/efzuyf69mcezvh4/S8980_jj5c/sketch/sketch_ThingSpeak_Arduino_Ehternet_DHT11_DHT22.ino", "num_user_post": " 3", "author": "eruca"}, {"date": "January 25, 2014 - 4:40 pm", "content": "I've only just started using thingspeak so I'm not certain but I would probably limit the upload to one value, just try sending the one value first to see if that works then add the other values and see what happens.", "num_user_post": " 3", "author": "gadjet"}, {"date": "January 25, 2014 - 8:41 pm", "content": "I found that calling the updateThingspeak() function repeatedly didn't work.  I needed some delay between calls, and attention to client.stop() considerations.  When you have two fields, update them with one call to a single channel (see the channelFlowStr section below).  Thingspeak will not receive date more often than every 15 seconds.  Here's my some of my code:// Disconnect from ThingSpeak  if (!client.connected() && lastConnected)  {    Serial.println(F('...disconnected'));    Serial.println();    client.stop();  }  //if ((client.connected()==1) && ((long(millis()) - lastConnectionTime) > 60000))  //{  //  Serial.println(F('...disconnected after 60 seconds.'));  //  Serial.println();  //  client.stop();  //}  // Update ThingSpeak  Serial.print(F('Millis:'));  Serial.print((millis()));  Serial.print(F(' Last Connection:'));  Serial.print((lastConnectionTime));  Serial.print(F(' Time:'));  Serial.print((long(millis()) - lastConnectionTime));  Serial.print(F(' Client connected:'));  Serial.println(client.connected());  if(((long(millis()) - lastConnectionTime) > updateThingSpeakInterval))//deleted !client.connected() &//generate Custom Flow Channel String    // Slab Flow Meter    double FreqSum=0;    int FreqCount=0;    while (FreqMeasure.available()) {      // average several reading together      FreqSum = FreqSum + FreqMeasure.read();      FreqCount = FreqCount + 1;    }    double frequency = F_CPU / (FreqSum / FreqCount);    Serial.print('Frequency: ');    Serial.println(frequency);    double slabGPM = frequency / .53 / 3.8 ; //4.5 for 1 1/4 SEA flow meter    Serial.print('Slab GPM: ');    Serial.println(slabGPM);    String slabGPMStr = dtostrf(slabGPM, 7,2,buffer);    slabGPMStr.trim();    String channelFlowStr = String('field1=') + slabGPMStr;    //Runner RPM    double Freq2Sum=0;    int Freq2Count=0;    while (FreqMeasure2.available()) {      // average several reading together      Freq2Sum = Freq2Sum + FreqMeasure2.read();      Freq2Count = Freq2Count + 1;    }    double runnerRPM = F_CPU / (Freq2Sum / Freq2Count) * 60;    Serial.print('Runner RPM: ');    Serial.println(runnerRPM);    String runnerRPMStr = dtostrf(runnerRPM, 7,2,buffer);    runnerRPMStr.trim();    channelFlowStr = channelFlowStr + String('&field8=') + runnerRPMStr;     Serial.println('Flow: ' + channelFlowStr);    updateThingSpeak(channelFlowStr,channelFlowAPIKey);    delay(250);    // Print Thingspeak Update Response to Serial Monitor    while((client.available())){      char c = client.read();      Serial.print(c);    }    //generate Heat flux Channel String    double slabFlux = slabGPM * 8.33 * 60 *(allSensors[14].averageTemp-allSensors[15].averageTemp);//(Slab Cooling In-Slab Cooling Out)    slabFlux = round(slabFlux/100)*100; //round to hundreds    Serial.print('Slab Flux: ');    Serial.println(slabFlux);    String slabFluxStr = dtostrf(slabFlux, 7,0,buffer);    slabFluxStr.trim();    String channelFluxStr = String('field1=') + slabFluxStr;    Serial.println('Heat Flux: ' + channelFluxStr);    updateThingSpeak(channelFluxStr,channelFluxAPIKey);    delay(500);    // Print Thingspeak Update Response to Serial Monitor    while((client.available())){      char c = client.read();      Serial.print(c);    }    client.stop(); //stop after last connection is made}//custom Update Thingspeakvoid updateThingSpeak(String tsData,String writeAPIKey){  client.stop();  //added this because updating a second channel failed  if (client.connect(thingSpeakAddress, 80))  {    client.print('POST /update HTTP/1.1n');    client.print('Host: api.thingspeak.comn');    client.print('Connection: closen');    client.print('X-THINGSPEAKAPIKEY: '+writeAPIKey+'n');    client.print('Content-Type: application/x-www-form-urlencodedn');    client.print('Content-Length: ');    client.print(tsData.length());    client.print('nn');    client.print(tsData);    if (client.connected())    {      Serial.println(F('Connecting to ThingSpeak...'));      Serial.println();      failedCounter = 0;    }    else    {      failedCounter++;      Serial.print(F('Connection to ThingSpeak failed ('));      Serial.print(String(failedCounter, DEC)+')');      Serial.println();    }  }  else  {    failedCounter++;    Serial.print(F('Connection to ThingSpeak failed ('));    Serial.print(String(failedCounter, DEC)+')');    Serial.println();    lastConnectionTime = millis();  }}", "num_user_post": " 70", "author": "turgo"}, {"date": "January 27, 2014 - 3:37 pm", "content": "The problem is that using a single sensor does not load the data on ThingSpeak on xively works perfectly .. I wish I worked here as well.", "num_user_post": " 3", "author": "eruca"}, {"date": "January 28, 2014 - 12:19 am", "content": "Post your code where a single sensor does not work.", "num_user_post": " 70", "author": "turgo"}, {"date": "January 28, 2014 - 9:04 am", "content": "my device:Arduino Uno + Ethernet 5100 + 1 sensor DHT22 (Temperature & Humidity) on digital pin 7.Setting ThingSpeak: field 1: Temperaturefield 2: HumidityIDchannel: 9909Apykey: GO3UM9DXQ01F0O1FSketch: https://db.tt/e4taAU5K", "num_user_post": " 3", "author": "eruca"}, {"date": "January 28, 2014 - 1:28 pm", "content": "It looks like you are sending Thingspeak the digital read output from pin 7.  It would be 1 or 0.  Instead you should be sending String(myDHT22.getTemperatureC(),DEC).  What is the serial monitor output?", "num_user_post": " 70", "author": "turgo"}]}, {"url": "https://community.thingspeak.com/forum/arduino/make-your-relayduino-arduino-compatible-io-board-part-of-the-internet-of-things/", "posts": [{"date": "November 13, 2013 - 6:45 am", "content": "The Relayduino is a real world application; it helps in controlling lights and sprinkler systems, reading sensors and monitoring switches and other digital signals. It is also Arduino compatible controller and can be programmed with Arduino IDE for stand-alone operation. This project is more advanced than the simple getting started examples in the Exosite Arduino Library or the basic Arduino Temperature Monitor. This example will show both writing to and reading from the Exosite platform. We are providing the complete information about how to connect your Relayduino devices with Exosite portal. Sing up on Exosite portal https://portals.exosite.com to add your Relayduino devices with internet of things solutions.", "num_user_post": " 5", "author": "joshuasimi"}]}, {"url": "https://community.thingspeak.com/forum/arduino/basic-arduino-temperature-web-monitoring/", "posts": [{"date": "August 14, 2013 - 4:30 am", "content": "The Arduino Uno is a microcontroller board based on the ATmega328 (datasheet). It has 14 digital input/output pins (of which 6 can be used as PWM outputs), 6 analog inputs, a 16 MHz ceramic resonator, a USB connection, a power jack, an ICSP header, and a reset button. It contains everything needed to support the microcontroller; simply connect it to a computer with a USB cable or power it with a AC-to-DC adapter or battery to get started.Some time it is very difficult to setup the temperature monitoring system for Arduino Uno. Here you can find information about how to setup your basic Arduino Uno temperature web monitoring. It uses the Exosite library to set up a connection to the Exosite One Platform over Ethernet, reads the temperature over the one-wire interface, and sends the value to the platform every 120 seconds with the Basic HTTP API from Exosite. To use this API with your devices visit https://exosite.zendesk.com/hc/en-us/articles/200095738-Arduino-Basic-Temperature-Monitor", "num_user_post": " 5", "author": "joshuasimi"}]}, {"url": "https://community.thingspeak.com/forum/arduino/arduino-server-and-sending-data-to-thingspeak/", "posts": [{"date": "March 19, 2013 - 9:54 am", "content": "HiVery very new to this arduino kit so please bear with me if I have missed something very obvious.Basis of what I want to achieve. 3 one-wire sensors monitoring 3 parts of a boiler. 2 buttons to switch a relay to the boiler. This part is working. Here is the code below.#include#include#include#include // Data wire is plugged into port 2 on the Arduino#define ONE_WIRE_BUS 2// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)OneWire oneWire(ONE_WIRE_BUS);// Pass our oneWire reference to Dallas Temperature.DallasTemperature sensors(&oneWire);// arrays to hold device addresses// Assign the addresses of 1-Wire temp sensors.DeviceAddress FeedTemp = { 0x28, 0xCE, 0xCA, 0xE6, 0x03, 0x00, 0x00, 0xA9 };DeviceAddress ReturnTemp = { 0x28, 0x69, 0xCF, 0xE6, 0x03, 0x00, 0x00, 0xA2 };DeviceAddress VentTemp  = { 0x28, 0xE5, 0xD0, 0xE6, 0x03, 0x00, 0x00, 0x26 };// ethernet configurationbyte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };byte ip[] = { 192, 168, 0, 200 }; // P1 --> { 10, 1, 1, 5 };byte gateway[] = { 192, 168, 0, 1 }; // internet access via routerbyte subnet[] = { 255, 255, 255, 0 }; //subnet maskEthernetServer server(666);              // port 80 is default for HTTP// initialint BoilerRelay = 4;          // Boiler Relay is connected to digital pin 4int LDR = 0;          // LDR sensor is connected to analog in 0int BoilerRelayState = 0;     // variable for LED statusfloat photocell = 0;  // variable for photocell (LDR) analog valuechar c = 0;           // received datachar command[2] = '';  // commandvoid setup(){  Ethernet.begin(mac, ip, gateway, subnet);  //startEthernet();  //server.begin();  Serial.begin(9600); // initialize serial communications  Serial.println('Boiler Managment Control');  // Start up the library  sensors.begin(); // locate devices on the bus  Serial.print('Locating devices...');  Serial.print('Found ');  Serial.print(sensors.getDeviceCount(), DEC);  Serial.println(' devices.');  // report parasite power requirements  Serial.print('Parasite power is: ');  if (sensors.isParasitePowerMode()) Serial.println('ON');  else Serial.println('OFF');    // set the resolution to 10 bit (way more than I need)  sensors.setResolution(FeedTemp, 10);  sensors.setResolution(ReturnTemp, 10);  sensors.setResolution(VentTemp, 10);  // show the addresses we found on the bus  Serial.print('Device 1 Address: ');  printAddress(FeedTemp);  Serial.println();  Serial.print('Device 2 Address: ');  printAddress(ReturnTemp);  Serial.println();  Serial.print('Device 3 Address: ');  printAddress(VentTemp);  Serial.println();  Serial.print('Device 1 Resolution: ');  Serial.print(sensors.getResolution(FeedTemp), DEC);  Serial.println();  Serial.print('Device 2 Resolution: ');  Serial.print(sensors.getResolution(ReturnTemp), DEC);  Serial.println();  Serial.print('Device 3 Resolution: ');  Serial.print(sensors.getResolution(VentTemp), DEC);  Serial.println();  pinMode(BoilerRelay, OUTPUT); //Boiler Control Relay}void loop(void){  // call sensors.requestTemperatures() to issue a global temperature  // request to all devices on the bus  Serial.print('Requesting temperatures...');  sensors.requestTemperatures();  int BoilerFeedTemp = sensors.getTempC(FeedTemp);  int BoilerReturnTemp = sensors.getTempC(ReturnTemp);  int BoilerVentTemp = sensors.getTempC(VentTemp);  Serial.println('DONE');  EthernetClient client = server.available();  // detect if current is the first line  boolean current_line_is_first = true;  if (client) {    Serial.println('Running Server Page');    // an http request ends with a blank line    boolean current_line_is_blank = true;    while (client.connected()) {      if (client.available()) {        char c = client.read();        // if we've gotten to the end of the line (received a newline        // character) and the line is blank, the http request has ended,        // so we can send a reply        if (c == 'n' && current_line_is_blank) {          // send a standard http response header          client.println('HTTP/1.1 200 OK');          client.println('Content-Type: text/html');          client.println();          // auto reload webpage every 5 second          client.println('');          // webpage title          client.println('Boiler Managment Control System');          // Transfer Temperatures to web page and serial port          //Boiler Feed Temp          client.print('Boiler Feed = ');          client.print(BoilerFeedTemp);          client.print(' \u00b0C');          client.print('');          Serial.print('Boiler Feed Temp: ');          Serial.println(BoilerFeedTemp); // print bytes to serial          //Boiler Return Temp          client.print('Boiler Return = ');          client.print(BoilerReturnTemp);          client.print(' \u00b0C');          client.print('');          Serial.print('Boiler Return Temp: ');          Serial.println(BoilerReturnTemp); // print bytes to serial          //Boiler Vent Temp          client.print('Boiler Vent = ');          client.print(BoilerVentTemp);          client.print(' \u00b0C');          client.println('');          Serial.print('Boiler Vent Temp: ');          Serial.println(BoilerVentTemp); // print bytes to serial          // read digital pin 4 for the state of LED          BoilerRelayState = digitalRead(4);          if (BoilerRelayState == HIGH) { // Boiler Relay On            client.println('Boiler Relay On');          }          else { // Boiler Relay Off            client.println('Boiler Relay Off');          }            // button functions          client.println('');          client.println('Boiler Relay On');          client.println('Boiler Relay Off');          client.println('');          // webpage footer          client.println('Developed by Potential Power Ltd');          client.println('This page will automatically refresh every 5 seconds.');          break;        }        if (c == 'n') {          // we're starting a new line          current_line_is_first = false;          current_line_is_blank = true;        }        else if (c != 'r') {          // we've gotten a character on the current line          current_line_is_blank = false;        }        // get the first http request        if (current_line_is_first && c == '=') {          for (int i = 0; i < 1; i++) {            c = client.read();            command[i] = c;          }          // Boler Relay control          if (!strcmp(command, '1')) {            digitalWrite(BoilerRelay, HIGH);          }          else if (!strcmp(command, '2')) {            digitalWrite(BoilerRelay, LOW);          }        }      }    }    // give the web browser time to receive the data    delay(1);    client.stop(); } delay(2000);}// function to print a device addressvoid printAddress(DeviceAddress deviceAddress){  for (uint8_t i = 0; i < 8; i++)  {    // zero pad the address if necessary    if (deviceAddress[i] < 16) Serial.print('0');    Serial.print(deviceAddress[i], HEX);  }}This part works fine on it's own. Now I want to send the data for the 3 temperature sensors to thingspeak. Below is the code that I came up with by trying to inegrate the thingspeak test sketch that did work ion it's own. My integration does not though. Have tried so many things I have lost track and after 5 days looking at it, I am calling for some help from anyone with more experience. Below is the code that I am trying. For some reason it will just not connect to the thingspeak site. #include#include#include#include // ThingSpeak Settings//char thingSpeakAddress[] = 'google.com';//byte thingSpeakAddress[] = '184, 106, 153, 149';char thingSpeakAddress[] = 'api.thingspeak.com';String writeAPIKey = 'PHM23VGWGDxxxxx'; //Removed full key for securityconst int updateThingSpeakInterval = 30 * 1000;      // Time interval in milliseconds to update ThingSpeak (number of seconds * 1000 = interval)// Initialize Arduino Ethernet ClientEthernetClient cclient;// Data wire is plugged into port 2 on the Arduino#define ONE_WIRE_BUS 2// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)OneWire oneWire(ONE_WIRE_BUS);// Pass our oneWire reference to Dallas Temperature.DallasTemperature sensors(&oneWire);// arrays to hold device addresses// Assign the addresses of 1-Wire temp sensors.DeviceAddress FeedTemp = { 0x28, 0xCE, 0xCA, 0xE6, 0x03, 0x00, 0x00, 0xA9 };DeviceAddress ReturnTemp = { 0x28, 0x69, 0xCF, 0xE6, 0x03, 0x00, 0x00, 0xA2 };DeviceAddress VentTemp  = { 0x28, 0xE5, 0xD0, 0xE6, 0x03, 0x00, 0x00, 0x26 };// ethernet configurationbyte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };byte ip[] = { 192, 168, 0, 200 }; // P1 --> { 10, 1, 1, 5 };byte gateway[] = { 192, 168, 0, 1 }; // internet access via routerbyte subnet[] = { 255, 255, 255, 0 }; //subnet maskEthernetServer server(666);              // port 80 is default for HTTP// initialint BoilerRelay = 4;          // Boiler Relay is connected to digital pin 4int LDR = 0;          // LDR sensor is connected to analog in 0int BoilerRelayState = 0;     // variable for LED statusfloat photocell = 0;  // variable for photocell (LDR) analog valuechar c = 0;           // received datachar command[2] = '';  // command// Variable Setup for ThingSpeaklong lastConnectionTime = 0;boolean lastConnected = false;int failedCounter = 0;void setup(){  Ethernet.begin(mac, ip, gateway, subnet);  //startEthernet();  //server.begin();  Serial.begin(9600); // initialize serial communications  Serial.println('Boiler Managment Control');  // Start up the library  sensors.begin(); // locate devices on the bus  Serial.print('Locating devices...');  Serial.print('Found ');  Serial.print(sensors.getDeviceCount(), DEC);  Serial.println(' devices.');  // report parasite power requirements  Serial.print('Parasite power is: ');  if (sensors.isParasitePowerMode()) Serial.println('ON');  else Serial.println('OFF');    // set the resolution to 10 bit (way more than I need)  sensors.setResolution(FeedTemp, 10);  sensors.setResolution(ReturnTemp, 10);  sensors.setResolution(VentTemp, 10);  // show the addresses we found on the bus  Serial.print('Device 1 Address: ');  printAddress(FeedTemp);  Serial.println();  Serial.print('Device 2 Address: ');  printAddress(ReturnTemp);  Serial.println();  Serial.print('Device 3 Address: ');  printAddress(VentTemp);  Serial.println();  Serial.print('Device 1 Resolution: ');  Serial.print(sensors.getResolution(FeedTemp), DEC);  Serial.println();  Serial.print('Device 2 Resolution: ');  Serial.print(sensors.getResolution(ReturnTemp), DEC);  Serial.println();  Serial.print('Device 3 Resolution: ');  Serial.print(sensors.getResolution(VentTemp), DEC);  Serial.println();  pinMode(BoilerRelay, OUTPUT); //Boiler Control Relay}void loop(void){  // call sensors.requestTemperatures() to issue a global temperature  // request to all devices on the bus  Serial.print('Requesting temperatures...');  sensors.requestTemperatures();  int BoilerFeedTemp = sensors.getTempC(FeedTemp);  int BoilerReturnTemp = sensors.getTempC(ReturnTemp);  int BoilerVentTemp = sensors.getTempC(VentTemp);  Serial.println('DONE');// Print Update Response to Serial Monitor  if (cclient.available())  {    char c = cclient.read();    Serial.print(c);  }  // Disconnect from ThingSpeak  if (!cclient.connected() && lastConnected)  {    Serial.println('...disconnected');    Serial.println();    cclient.stop();  }  // Update ThingSpeak  if(!cclient.connected() && (millis() - lastConnectionTime > updateThingSpeakInterval))  {    Serial.println('ThingSpeak Client Connected.......');    updateThingSpeak('field1='+String(BoilerFeedTemp, DEC)+'&field2='+String(BoilerReturnTemp, DEC)+'&field='+String(BoilerVentTemp, DEC));  }  // Check if Arduino Ethernet needs to be restarted  if (failedCounter > 3 ) {  //startEthernet();  } lastConnected = cclient.connected();  EthernetClient client = server.available();  // detect if current is the first line  boolean current_line_is_first = true;  if (client) {    Serial.println('Running Server Page');    // an http request ends with a blank line    boolean current_line_is_blank = true;    while (client.connected()) {      if (client.available()) {        char c = client.read();        // if we've gotten to the end of the line (received a newline        // character) and the line is blank, the http request has ended,        // so we can send a reply        if (c == 'n' && current_line_is_blank) {          // send a standard http response header          client.println('HTTP/1.1 200 OK');          client.println('Content-Type: text/html');          client.println();          // auto reload webpage every 5 second          client.println('');          // webpage title          client.println('Boiler Managment Control System');          // Transfer Temperatures to web page and serial port          //Boiler Feed Temp          client.print('Boiler Feed = ');          client.print(BoilerFeedTemp);          client.print(' \u00b0C');          client.print('');          Serial.print('Boiler Feed Temp: ');          Serial.println(BoilerFeedTemp); // print bytes to serial          //Boiler Return Temp          client.print('Boiler Return = ');          client.print(BoilerReturnTemp);          client.print(' \u00b0C');          client.print('');          Serial.print('Boiler Return Temp: ');          Serial.println(BoilerReturnTemp); // print bytes to serial          //Boiler Vent Temp          client.print('Boiler Vent = ');          client.print(BoilerVentTemp);          client.print(' \u00b0C');          client.println('');          Serial.print('Boiler Vent Temp: ');          Serial.println(BoilerVentTemp); // print bytes to serial          // read digital pin 4 for the state of LED          BoilerRelayState = digitalRead(4);          if (BoilerRelayState == HIGH) { // Boiler Relay On            client.println('Boiler Relay On');          }          else { // Boiler Relay Off            client.println('Boiler Relay Off');          }            // button functions          client.println('');          client.println('Boiler Relay On');          client.println('Boiler Relay Off');          client.println('');          // webpage footer          client.println('Developed by Potential Power Ltd');          client.println('This page will automatically refresh every 5 seconds.');          break;        }        if (c == 'n') {          // we're starting a new line          current_line_is_first = false;          current_line_is_blank = true;        }        else if (c != 'r') {          // we've gotten a character on the current line          current_line_is_blank = false;        }        // get the first http request        if (current_line_is_first && c == '=') {          for (int i = 0; i < 1; i++) {            c = client.read();            command[i] = c;          }          // Boler Relay control          if (!strcmp(command, '1')) {            digitalWrite(BoilerRelay, HIGH);          }          else if (!strcmp(command, '2')) {            digitalWrite(BoilerRelay, LOW);          }        }      }    }    // give the web browser time to receive the data    delay(1);    client.stop(); } delay(2000);}// function to print a device addressvoid printAddress(DeviceAddress deviceAddress){  for (uint8_t i = 0; i < 8; i++)  {    // zero pad the address if necessary    if (deviceAddress[i] < 16) Serial.print('0');    Serial.print(deviceAddress[i], HEX);  }}void updateThingSpeak(String tsData){  if (cclient.connect(thingSpeakAddress, 80)) {    Serial.println('connected');    cclient.println('GET /search?q=arduino HTTP/1.0');    cclient.println();  } else {    Serial.println('connection failed');  }  if (cclient.connect(thingSpeakAddress, 80))  {    cclient.print('POST /update HTTP/1.1n');    cclient.print('Host: api.thingspeak.comn');    cclient.print('Connection: closen');    cclient.print('X-THINGSPEAKAPIKEY: '+writeAPIKey+'n');    cclient.print('Content-Type: application/x-www-form-urlencodedn');    cclient.print('Content-Length: ');    cclient.print(tsData.length());    cclient.print('nn');    cclient.print(tsData);    lastConnectionTime = millis();    if (cclient.connected())    {      Serial.println('Connecting to ThingSpeak...');      Serial.println();      failedCounter = 0;      cclient.stop();    }    else    {      failedCounter++;      Serial.println('Connection to ThingSpeak failed ('+String(failedCounter, DEC)+')');      Serial.println();    }  }  else  {    failedCounter++;    Serial.println('Connection to ThingSpeak Failed ('+String(failedCounter, DEC)+')');    Serial.println();    lastConnectionTime = millis();  }}void startEthernet(){  cclient.stop();  Serial.println('Connecting Arduino to network...');  Serial.println();    delay(1000);  // Connect to network amd obtain an IP address using DHCP  if (Ethernet.begin(mac) == 0)  {    Serial.println('DHCP Failed, reset Arduino to try again');    Serial.println();  }  else  {    Serial.println('Arduino connected to network using DHCP');    Serial.println();  }  delay(10);}I have looked at zookats code for server and client use but could not make head nor tail of how to implement it with this.Any advise much appreciated.RegardsLaurie", "num_user_post": " 1", "author": "laurie"}, {"date": "June 16, 2013 - 1:55 am", "content": "in this line:updateThingSpeak('field1='+String(BoilerFeedTemp, DEC)+'&field2='+String(BoilerReturnTemp, DEC)+'&field='+String(BoilerVentTemp, DEC));you are missing the field number for the last field: '&field3='", "num_user_post": " 70", "author": "turgo"}]}, {"url": "https://community.thingspeak.com/forum/arduino/arduino-to-thingspeak-channel-update-failure/", "posts": [{"date": "December 17, 2012 - 6:59 am", "content": "I would be most grateful if you could advice me with the following. I have configured my Arduino with Ethernet shield (i.e. ip and mac address) according to the thingspeak example. I am using Manual IP settings since the\u00a0 router at my university doesn't allow DHCP.But when I try to connect it , I can\u2019t see any feed updates. It shows the data on my Arduino serial monitor but, it is not updating on thingspeak api.\u00a0Please advice as what can be the problem and why is it not working as it should be. Am i missing somethings??Attached are the codes and the screen shots for your reference.\u00a0Your assistance will be highly appreciated.*/#include <SPI.h>#include <Ethernet.h>// Local Network Settings\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0byte mac[]\u00a0\u00a0\u00a0\u00a0 = { 0xD4, 0x28, 0xB2, 0xFF, 0xC1, 0x93 }; // Must be unique on local networkbyte ip[]\u00a0\u00a0\u00a0\u00a0\u00a0 = { 117, 17, 81, 79};\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Must be unique on local networkbyte gateway[] = { 117,17,81, 1};byte subnet[]\u00a0 = { 255, 255, 255,\u00a0\u00a0 0 };// ThingSpeak Settingschar thingSpeakAddress[] = 'api.thingspeak.com';//byte server[]\u00a0 = { 184, 106, 153, 149 }; // IP Address for the ThingSpeak APIString writeAPIKey = 'RKDKZ8OSMGN2T5KE';\u00a0\u00a0\u00a0 // Write API Key for a ThingSpeak Channelconst int updateInterval = 30000;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Time interval in milliseconds to update ThingSpeak\u00a0 \u00a0//EthernetClient client(server, 80);EthernetClient client;// Variable Setuplong lastConnectionTime = 0;boolean lastConnected = false;int resetCounter = 0;void setup(){\u00a0 Ethernet.begin(mac, ip, gateway, subnet);\u00a0 Serial.begin(9600);\u00a0 delay(1000);}void loop(){\u00a0 String analogPin0 = String(analogRead(A0), DEC);\u00a0 //Serial.println(analogPin0);\u00a0\u00a0 // Print Update Response to Serial Monitor\u00a0 if (client.available())\u00a0 {\u00a0\u00a0\u00a0 char c = client.read();\u00a0\u00a0\u00a0 Serial.print(c);\u00a0 }\u00a0\u00a0 // Disconnect from ThingSpeak\u00a0 if (!client.connected() && lastConnected)\u00a0 {\u00a0\u00a0\u00a0 Serial.println();\u00a0\u00a0\u00a0 Serial.println('...disconnected.');\u00a0\u00a0\u00a0 Serial.println();\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0 client.stop();\u00a0 }\u00a0\u00a0 // Update ThingSpeak\u00a0 if(!client.connected() && (millis() - lastConnectionTime > updateInterval))\u00a0 {\u00a0\u00a0\u00a0 updateThingSpeak('field1='+analogPin0);\u00a0 }\u00a0\u00a0 lastConnected = client.connected();}void updateThingSpeak(String tsData){\u00a0 //if (client.connect(server, 80))\u00a0 if (client.connect(thingSpeakAddress, 80))\u00a0 {\u00a0\u00a0\u00a0 Serial.println('Connected to ThingSpeak...');\u00a0\u00a0\u00a0 Serial.println();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0 client.print('POST /update HTTP/1.1n');\u00a0\u00a0\u00a0 client.print('Host: api.thingspeak.comn');\u00a0\u00a0\u00a0 client.print('Connection: closen');\u00a0\u00a0\u00a0 client.print('X-THINGSPEAKAPIKEY: '+writeAPIKey+'n');\u00a0\u00a0\u00a0 client.print('Content-Type: application/x-www-form-urlencodedn');\u00a0\u00a0\u00a0 client.print('Content-Length: ');\u00a0\u00a0\u00a0 client.print(tsData.length());\u00a0\u00a0\u00a0 client.print('nn');\u00a0\u00a0\u00a0 client.print(tsData);\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0 lastConnectionTime = millis();\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0 resetCounter = 0;\u00a0\u00a0 \u00a0\u00a0 }\u00a0 else\u00a0 {\u00a0\u00a0\u00a0 Serial.println('Connection Failed.');\u00a0 \u00a0\u00a0\u00a0\u00a0 Serial.println();\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0 resetCounter++;\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0 if (resetCounter >=5 ) {resetEthernetShield();}\u00a0\u00a0\u00a0 lastConnectionTime = millis();\u00a0 }}void resetEthernetShield(){\u00a0 Serial.println('Resetting Ethernet Shield.');\u00a0 \u00a0\u00a0 Serial.println();\u00a0\u00a0 client.stop();\u00a0 delay(1000);\u00a0\u00a0 Ethernet.begin(mac, ip, gateway, subnet);\u00a0 delay(1000);}", "num_user_post": " 3", "author": "rajeev.piyare"}, {"date": "December 18, 2012 - 12:07 am", "content": "What version of the Arduino IDE are you using? I think the above code needs Arduino 0022.", "num_user_post": " 402", "author": "Hans"}, {"date": "December 21, 2012 - 7:21 am", "content": "Currently I am using the latest Arduino\u00a0 version 1.0.2.", "num_user_post": " 3", "author": "rajeev.piyare"}]}, {"url": "https://community.thingspeak.com/forum/arduino/experiment-with-arduino/", "posts": [{"date": "December 12, 2012 - 10:29 am", "content": "Experiment with arduinoHello. I want to do an experiment with Arduino that allows me to turn on a light when someone writes a certain word in Twitter.\u00a0I have seen this example: http://www.instructables.com/id/Twitter-Powered-Gumball-Machine/And I would like to ask you if it is possible to realize it with Thingspeak and to ask you a bit of help.\u00a0Thank you.\u00a0", "num_user_post": " 1", "author": "crichtoniano"}]}]}