{"name": "Arduino RTC Time Tracker", "gauges": "", "gauges2": "", "statuses": "", "url": "https://thingspeak.com//channels/483394", "author": "bpowell2008", "disc": "Tracking drift in time with an ATMega328 acting as the RTC (using 32.768 kHz crystal)", "tags": ["Arduino","ATmega328p","RTC","32.768","Clock","temperature","Accuracy"], "shares": "0", "charts": ["/channels/483394/charts/1?average=720&bgcolor=%23ffffff&color=%23d62020&dynamic=true&results=2880&title=Garage+Temperature&type=spline","/channels/483394/charts/2?average=720&bgcolor=%23ffffff&color=%23d62020&dynamic=true&results=2880&title=Arduino+-+PC++%C2%B5Sec+offset&type=line","/apps/matlab_visualizations/227684?size=iframe","/apps/matlab_visualizations/227954?size=iframe"], "comments": [{"author": "bpowell2008", "creation_time": "5 months ago", "text": "People say, 'An Arduino can't act as an RTC...' and that bugged me, so I set out to Test. This is a prototyping PCB of my design, running an SMT ATMega328p with Optiboot. I didn't install a resonator, but instead, installed a 32.768 kHz crystal on the XTAL lines. I'm using Timer2 in Asynchronous mode to count pulses. I wrote a simple program in the Arduino IDE to increment the time / date every second. The Arduino also polls a DS18B20 temperature sensor for environmental temp. I have the ATMega running at 1Mhz, and it sleeps inbetween the seconds. The device was pulling under 10uA (average)...was down to 1uA running at 250kHz, but couldn't communicate with the one-wire temp-sensor at that slow frequency. The arduino outputs serial every second...a Python app receives that, and notes the PC time (Microseconds)...all things being equal, the Arduino should send the time to the PC at (or around) the same Microsecond offset all the time. If the number drops, it means the Arduino is running fast...if the microsecond offset increases, the Arduino is running slow.  My target for accuracy is < 1PPM."}], "maps": "", "matlabs": "", "language": "en"}